#!/usr/bin/env node

var path = require('path');
var exec = require('child_process').exec;
var fs = require('fs');
var program = require('commander');
var Q = require('Q');
var _ = require('lodash');
var request = require('request');
var pkg = require('../package.json');
var Spec = require('../lib/Spec');

Q.longStackSupport = true;

program.version(pkg.version);

program
  .command('docs [dir] [outputFile]')
  .description('Assemble API Blueprint from directory and generate an HTML docs file.')
  .action(function (dir, outputFile, options) {
    var blueprintFile = '_blueprint-tmp.md';

    var command = [
      path.resolve(__dirname, '../node_modules/.bin/aglio'),
      '-i', blueprintFile,
      '-o', outputFile
    ].join(' ');

    function cleanup (err) {
      fs.unlinkSync(blueprintFile);
    }

    Spec
      .load(dir)
      .then(function (spec) {
        return spec.saveBlueprint(blueprintFile);
      })
      .then(function () {
        return Q.Promise(function (resolve, reject) {
          exec(command, function (err, stdout, stderr) {
            var result = err || stderr || stdout;

            if (result) {
              console.log(result);
            }

            resolve();
          });
        });
      })
      .done(cleanup, function (err) {
        cleanup();

        if (err) {
          throw err;
        }
      });
  });

program
  .command('build [dir] [outputFile]')
  .description('Assemble API Blueprint from directory.')
  .action(function (dir, outputFile, options) {
    Spec
      .load(dir)
      .then(function (spec) {
        return spec.saveBlueprint(outputFile);
      })
      .done(_.noop, function (err) {
        throw err;
      });
  });

program
  .command('validate [dir]')
  .description('Test for spec errors.')
  .action(function (dir, options) {
    Spec
      .load(dir)
      .then(function (spec) {
        return spec.loadBlueprint();
      })
      .done(function (blueprint) {
        console.log('OK');
      }, function (err) {
        throw err;
      });
  });

program
  .command('test [dir] [baseUrl]')
  .description('Test API server against specs.')
  .option('-r, --reporter <reporter>', 'The mocha reporter to use.')
  .action(function (dir, baseUrl, options) {
    var testPath = path.resolve(__dirname, '../lib/endpointTests.js');
    var mochaPath = path.resolve(__dirname, '../node_modules/.bin/mocha');
    exec('SPEC_DIR=' + dir + ' BASE_URL=' + baseUrl + ' ' + mochaPath + ' --reporter ' + options.reporter + ' ' + testPath, function (err, stdout, stderr) {
      if (stdout) {
        process.stderr.write(stdout);
      }

      if (stderr) {
        process.stderr.write(stderr);
      }
    });
  });

program.parse(process.argv);
